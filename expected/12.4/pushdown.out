\set ECHO none
-- Before running this file User must create database mysql_fdw_regress on
-- mysql with all permission for 'edb' user with 'edb' password and ran
-- mysql_init.sh file to create tables.
\c contrib_regression
--Testcase 1:
CREATE EXTENSION IF NOT EXISTS mysql_fdw;
--Testcase 2:
CREATE SERVER mysql_svr FOREIGN DATA WRAPPER mysql_fdw
  OPTIONS (host :MYSQL_HOST, port :MYSQL_PORT);
--Testcase 3:
CREATE USER MAPPING FOR public SERVER mysql_svr
  OPTIONS (username :MYSQL_USER_NAME, password :MYSQL_PASS);
-- Create foreign tables
--Testcase 4:
CREATE FOREIGN TABLE f_test_tbl1 (c1 INTEGER, c2 VARCHAR(10), c3 CHAR(9), c4 BIGINT, c5 pg_catalog.Date, c6 DECIMAL, c7 INTEGER, c8 SMALLINT)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', table_name 'test_tbl1');
--Testcase 5:
CREATE FOREIGN TABLE f_test_tbl2 (c1 INTEGER, c2 VARCHAR(14), c3 VARCHAR(13))
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', table_name 'test_tbl2');
-- Insert data in mysql db using foreign tables
--Testcase 6:
INSERT INTO f_test_tbl1 VALUES (100, 'EMP1', 'ADMIN', 1300, '1980-12-17', 800.23, NULL, 20);
--Testcase 7:
INSERT INTO f_test_tbl1 VALUES (200, 'EMP2', 'SALESMAN', 600, '1981-02-20', 1600.00, 300, 30);
--Testcase 8:
INSERT INTO f_test_tbl1 VALUES (300, 'EMP3', 'SALESMAN', 600, '1981-02-22', 1250, 500, 30);
--Testcase 9:
INSERT INTO f_test_tbl1 VALUES (400, 'EMP4', 'MANAGER', 900, '1981-04-02', 2975.12, NULL, 20);
--Testcase 10:
INSERT INTO f_test_tbl1 VALUES (500, 'EMP5', 'SALESMAN', 600, '1981-09-28', 1250, 1400, 30);
--Testcase 11:
INSERT INTO f_test_tbl1 VALUES (600, 'EMP6', 'MANAGER', 900, '1981-05-01', 2850, NULL, 30);
--Testcase 12:
INSERT INTO f_test_tbl1 VALUES (700, 'EMP7', 'MANAGER', 900, '1981-06-09', 2450.45, NULL, 10);
--Testcase 13:
INSERT INTO f_test_tbl1 VALUES (800, 'EMP8', 'FINANCE', 400, '1987-04-19', 3000, NULL, 20);
--Testcase 14:
INSERT INTO f_test_tbl1 VALUES (900, 'EMP9', 'HEAD', NULL, '1981-11-17', 5000, NULL, 10);
--Testcase 15:
INSERT INTO f_test_tbl1 VALUES (1000, 'EMP10', 'SALESMAN', 600, '1980-09-08', 1500, 0, 30);
--Testcase 16:
INSERT INTO f_test_tbl1 VALUES (1100, 'EMP11', 'ADMIN', 800, '1987-05-23', 1100, NULL, 20);
--Testcase 17:
INSERT INTO f_test_tbl1 VALUES (1200, 'EMP12', 'ADMIN', 600, '1981-12-03', 950, NULL, 30);
--Testcase 18:
INSERT INTO f_test_tbl1 VALUES (1300, 'EMP13', 'FINANCE', 400, '1981-12-03', 3000, NULL, 20);
--Testcase 19:
INSERT INTO f_test_tbl1 VALUES (1400, 'EMP14', 'ADMIN', 700, '1982-01-23', 1300, NULL, 10);
--Testcase 20:
INSERT INTO f_test_tbl2 VALUES(10, 'DEVELOPMENT', 'PUNE');
--Testcase 21:
INSERT INTO f_test_tbl2 VALUES(20, 'ADMINISTRATION', 'BANGLORE');
--Testcase 22:
INSERT INTO f_test_tbl2 VALUES(30, 'SALES', 'MUMBAI');
--Testcase 23:
INSERT INTO f_test_tbl2 VALUES(40, 'HR', 'NAGPUR');
SET datestyle TO ISO;
-- WHERE clause pushdown
--Testcase 24:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6 AS "salary", c8 FROM f_test_tbl1 e
  WHERE c6 IN (800,2450)
  ORDER BY c1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Local server startup cost: 10
         Remote query: SELECT `c1`, `c2`, `c6`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE (`c6`  IN ('800', '2450'))
(7 rows)

--Testcase 25:
SELECT c1, c2, c6 AS "salary", c8 FROM f_test_tbl1 e
  WHERE c6 IN (800,2450)
  ORDER BY c1;
 c1 | c2 | salary | c8 
----+----+--------+----
(0 rows)

--Testcase 26:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_test_tbl1 e
  WHERE c6 > 3000
  ORDER BY c1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_test_tbl1 e
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Local server startup cost: 10
   Remote query: SELECT `c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE ((`c6` > 3000)) ORDER BY `c1` IS NULL ASC, `c1` ASC
(4 rows)

--Testcase 27:
SELECT * FROM f_test_tbl1 e
  WHERE c6 > 3000
  ORDER BY c1;
 c1  |  c2  |  c3  | c4 |     c5     |     c6     | c7 | c8 
-----+------+------+----+------------+------------+----+----
 900 | EMP9 | HEAD |    | 1981-11-17 | 5000.00000 |    | 10
(1 row)

--Testcase 28:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 = 1500
  ORDER BY c1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Local server startup cost: 10
         Remote query: SELECT `c1`, `c2`, `c6`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE ((`c6` = 1500))
(7 rows)

--Testcase 29:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 = 1500
  ORDER BY c1;
  c1  |  c2   |     c6     | c8 
------+-------+------------+----
 1000 | EMP10 | 1500.00000 | 30
(1 row)

--Testcase 30:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 BETWEEN 1000 AND 4000
  ORDER BY c1;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Local server startup cost: 10
         Remote query: SELECT `c1`, `c2`, `c6`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE ((`c6` >= 1000)) AND ((`c6` <= 4000))
(7 rows)

--Testcase 31:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 BETWEEN 1000 AND 4000
  ORDER BY c1;
  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  200 | EMP2  | 1600.00000 | 30
  300 | EMP3  | 1250.00000 | 30
  400 | EMP4  | 2975.12000 | 20
  500 | EMP5  | 1250.00000 | 30
  600 | EMP6  | 2850.00000 | 30
  700 | EMP7  | 2450.45000 | 10
  800 | EMP8  | 3000.00000 | 20
 1000 | EMP10 | 1500.00000 | 30
 1100 | EMP11 | 1100.00000 | 20
 1300 | EMP13 | 3000.00000 | 20
 1400 | EMP14 | 1300.00000 | 10
(11 rows)

--Testcase 32:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IS NOT NULL
  ORDER BY c1;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_test_tbl1 e
   Output: c1, c2, c6, c8
   Local server startup cost: 10
   Remote query: SELECT `c1`, `c2`, `c6`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE ((`c2` IS NOT NULL)) ORDER BY `c1` IS NULL ASC, `c1` ASC
(4 rows)

--Testcase 33:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IS NOT NULL
  ORDER BY c1;
  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  100 | EMP1  |  800.23000 | 20
  200 | EMP2  | 1600.00000 | 30
  300 | EMP3  | 1250.00000 | 30
  400 | EMP4  | 2975.12000 | 20
  500 | EMP5  | 1250.00000 | 30
  600 | EMP6  | 2850.00000 | 30
  700 | EMP7  | 2450.45000 | 10
  800 | EMP8  | 3000.00000 | 20
  900 | EMP9  | 5000.00000 | 10
 1000 | EMP10 | 1500.00000 | 30
 1100 | EMP11 | 1100.00000 | 20
 1200 | EMP12 |  950.00000 | 30
 1300 | EMP13 | 3000.00000 | 20
 1400 | EMP14 | 1300.00000 | 10
(14 rows)

--Testcase 34:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_test_tbl1 e
  WHERE c5 <= '1980-12-17'
  ORDER BY c1;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_test_tbl1 e
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Local server startup cost: 10
   Remote query: SELECT `c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE ((`c5` <= '1980-12-17')) ORDER BY `c1` IS NULL ASC, `c1` ASC
(4 rows)

--Testcase 35:
SELECT * FROM f_test_tbl1 e
  WHERE c5 <= '1980-12-17'
  ORDER BY c1;
  c1  |  c2   |    c3    |  c4  |     c5     |     c6     | c7 | c8 
------+-------+----------+------+------------+------------+----+----
  100 | EMP1  | ADMIN    | 1300 | 1980-12-17 |  800.23000 |    | 20
 1000 | EMP10 | SALESMAN |  600 | 1980-09-08 | 1500.00000 |  0 | 30
(2 rows)

--Testcase 36:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Local server startup cost: 10
         Remote query: SELECT `c1`, `c2`, `c6`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE (`c2`  IN ('EMP6', 'EMP12', 'EMP5'))
(7 rows)

--Testcase 37:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;
  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  500 | EMP5  | 1250.00000 | 30
  600 | EMP6  | 2850.00000 | 30
 1200 | EMP12 |  950.00000 | 30
(3 rows)

--Testcase 38:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Local server startup cost: 10
         Remote query: SELECT `c1`, `c2`, `c6`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE (`c2`  IN ('EMP6', 'EMP12', 'EMP5'))
(7 rows)

--Testcase 39:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;
  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  500 | EMP5  | 1250.00000 | 30
  600 | EMP6  | 2850.00000 | 30
 1200 | EMP12 |  950.00000 | 30
(3 rows)

--Testcase 40:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'SALESMAN'
  ORDER BY c1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Local server startup cost: 10
         Remote query: SELECT `c1`, `c2`, `c6`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE ((`c3` LIKE BINARY 'SALESMAN'))
(7 rows)

--Testcase 41:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'SALESMAN'
  ORDER BY c1;
  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  200 | EMP2  | 1600.00000 | 30
  300 | EMP3  | 1250.00000 | 30
  500 | EMP5  | 1250.00000 | 30
 1000 | EMP10 | 1500.00000 | 30
(4 rows)

--Testcase 42:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'MANA%'
  ORDER BY c1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Local server startup cost: 10
         Remote query: SELECT `c1`, `c2`, `c6`, `c8` FROM `mysql_fdw_regress`.`test_tbl1` WHERE ((`c3` LIKE BINARY 'MANA%'))
(7 rows)

--Testcase 43:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'MANA%'
  ORDER BY c1;
 c1  |  c2  |     c6     | c8 
-----+------+------------+----
 400 | EMP4 | 2975.12000 | 20
 600 | EMP6 | 2850.00000 | 30
 700 | EMP7 | 2450.45000 | 10
(3 rows)

-- Aggregate pushdown
--Testcase 51:
CREATE FOREIGN TABLE aggtest (
  a       int2,
  b     float4
) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_core', table_name 'aggtest');
--Testcase 52:
SELECT * FROM aggtest;
  a  |    b    
-----+---------
  56 |     7.8
 100 |  99.097
   0 | 0.09561
  42 |  324.78
(4 rows)

--Testcase 53:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan
   Output: (avg(a))
   Local server startup cost: 10
   Remote query: SELECT avg(`a`) FROM `mysql_fdw_core`.`aggtest` WHERE ((`a` < 100))
(4 rows)

--Testcase 54:
SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;
 avg_32  
---------
 32.6667
(1 row)

--Testcase 55:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(a) AS sum_198 FROM aggtest;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Foreign Scan
   Output: (sum(a))
   Local server startup cost: 10
   Remote query: SELECT sum(`a`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 56:
SELECT sum(a) AS sum_198 FROM aggtest;
 sum_198 
---------
     198
(1 row)

--Testcase 57:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(b) AS avg_431_773 FROM aggtest;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Foreign Scan
   Output: (sum(b))
   Local server startup cost: 10
   Remote query: SELECT sum(`b`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 58:
SELECT sum(b) AS avg_431_773 FROM aggtest;
 avg_431_773 
-------------
    431.7726
(1 row)

--Testcase 59:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT max(a) AS max_100 FROM aggtest;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: $0
   InitPlan 1 (returns $0)
     ->  Limit
           Output: aggtest.a
           ->  Foreign Scan on public.aggtest
                 Output: aggtest.a
                 Local server startup cost: 10
                 Remote query: SELECT `a` FROM `mysql_fdw_core`.`aggtest` WHERE ((`a` IS NOT NULL)) ORDER BY `a` IS NULL DESC, `a` DESC
(9 rows)

--Testcase 60:
SELECT max(a) AS max_100 FROM aggtest;
 max_100 
---------
     100
(1 row)

--Testcase 61:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT max(aggtest.b) AS max_324_78 FROM aggtest;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: $0
   InitPlan 1 (returns $0)
     ->  Limit
           Output: aggtest.b
           ->  Foreign Scan on public.aggtest
                 Output: aggtest.b
                 Local server startup cost: 10
                 Remote query: SELECT `b` FROM `mysql_fdw_core`.`aggtest` WHERE ((`b` IS NOT NULL)) ORDER BY `b` IS NULL DESC, `b` DESC
(9 rows)

--Testcase 62:
SELECT max(aggtest.b) AS max_324_78 FROM aggtest;
 max_324_78 
------------
     324.78
(1 row)

--Testcase 63:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT min(a) AS min_0 FROM aggtest;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: $0
   InitPlan 1 (returns $0)
     ->  Limit
           Output: aggtest.a
           ->  Foreign Scan on public.aggtest
                 Output: aggtest.a
                 Local server startup cost: 10
                 Remote query: SELECT `a` FROM `mysql_fdw_core`.`aggtest` WHERE ((`a` IS NOT NULL)) ORDER BY `a` IS NULL ASC, `a` ASC
(9 rows)

--Testcase 64:
SELECT min(a) AS min_0 FROM aggtest;
 min_0 
-------
     0
(1 row)

--Testcase 65:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(a) FROM aggtest;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan
   Output: (count(a))
   Local server startup cost: 10
   Remote query: SELECT count(`a`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 66:
SELECT count(a) FROM aggtest;
 count 
-------
     4
(1 row)

--Testcase 67:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT min(aggtest.b) AS min_7_8 FROM aggtest WHERE b > 5;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: $0
   InitPlan 1 (returns $0)
     ->  Limit
           Output: aggtest.b
           ->  Foreign Scan on public.aggtest
                 Output: aggtest.b
                 Local server startup cost: 10
                 Remote query: SELECT `b` FROM `mysql_fdw_core`.`aggtest` WHERE ((`b` IS NOT NULL)) AND ((`b` > 5)) ORDER BY `b` IS NULL ASC, `b` ASC
(9 rows)

--Testcase 68:
SELECT min(aggtest.b) AS min_7_8 FROM aggtest WHERE b > 5;
 min_7_8 
---------
     7.8
(1 row)

--Testcase 69:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT stddev_pop(b) FROM aggtest;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan
   Output: (stddev_pop(b))
   Local server startup cost: 10
   Remote query: SELECT stddev_pop(`b`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 70:
SELECT stddev_pop(b) FROM aggtest;
     stddev_pop     
--------------------
 131.10703231895047
(1 row)

--Testcase 71:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT stddev_samp(b) FROM aggtest;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan
   Output: (stddev_samp(b))
   Local server startup cost: 10
   Remote query: SELECT stddev_samp(`b`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 72:
SELECT stddev_samp(b) FROM aggtest;
    stddev_samp     
--------------------
 151.38936080399804
(1 row)

--Testcase 73:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT var_pop(b) FROM aggtest;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan
   Output: (var_pop(b))
   Local server startup cost: 10
   Remote query: SELECT var_pop(`b`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 74:
SELECT var_pop(b) FROM aggtest;
      var_pop       
--------------------
 17189.053923482323
(1 row)

--Testcase 75:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT var_samp(b) FROM aggtest;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan
   Output: (var_samp(b))
   Local server startup cost: 10
   Remote query: SELECT var_samp(`b`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 76:
SELECT var_samp(b) FROM aggtest;
      var_samp      
--------------------
 22918.738564643096
(1 row)

--Testcase 77:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT variance(b) FROM aggtest;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan
   Output: (variance(b))
   Local server startup cost: 10
   Remote query: SELECT variance(`b`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 78:
SELECT variance(b) FROM aggtest;
      variance      
--------------------
 17189.053923482323
(1 row)

--Testcase 79:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT json_agg(a), json_agg(b) FROM aggtest;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (json_agg(a)), (json_agg(b))
   Local server startup cost: 10
   Remote query: SELECT json_arrayagg(`a`), json_arrayagg(`b`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 80:
SELECT json_agg(a), json_agg(b) FROM aggtest;
     json_agg     |                                    json_agg                                    
------------------+--------------------------------------------------------------------------------
 [56, 100, 0, 42] | [7.800000190734863, 99.09700012207033, 0.09561000019311904, 324.7799987792969]
(1 row)

--Testcase 81:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT json_object_agg(a, b) FROM aggtest;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan
   Output: (json_object_agg(a, b))
   Local server startup cost: 10
   Remote query: SELECT json_objectagg(`a`, `b`) FROM `mysql_fdw_core`.`aggtest`
(4 rows)

--Testcase 82:
SELECT json_object_agg(a, b) FROM aggtest;
                                            json_object_agg                                             
--------------------------------------------------------------------------------------------------------
 {"0": 0.09561000019311904, "42": 324.7799987792969, "56": 7.800000190734863, "100": 99.09700012207033}
(1 row)

--Testcase 83:
CREATE FOREIGN TABLE bitwise_test(
  i2 INT2,
  i4 INT4,
  i8 INT8,
  i INTEGER,
  x INT2
) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_core', table_name 'bitwise_test');
--Testcase 84:
DELETE FROM bitwise_test;
--Testcase 85:
INSERT INTO bitwise_test VALUES
  (1, 1, 1, 1, 1),
  (3, 3, 3, null, 2),
  (7, 7, 7, 3, 4);
--Testcase 86:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT
  BIT_AND(i2) AS "1",
  BIT_AND(i4) AS "1",
  BIT_AND(i8) AS "1",
  BIT_AND(i)  AS "?",
  BIT_AND(x)  AS "0",
  BIT_OR(i2)  AS "7",
  BIT_OR(i4)  AS "7",
  BIT_OR(i8)  AS "7",
  BIT_OR(i)   AS "?",
  BIT_OR(x)   AS "7"
FROM bitwise_test;
                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (bit_and(i2)), (bit_and(i4)), (bit_and(i8)), (bit_and(i)), (bit_and(x)), (bit_or(i2)), (bit_or(i4)), (bit_or(i8)), (bit_or(i)), (bit_or(x))
   Local server startup cost: 10
   Remote query: SELECT CAST(bit_and(`i2`) AS SIGNED), CAST(bit_and(`i4`) AS SIGNED), CAST(bit_and(`i8`) AS SIGNED), CAST(bit_and(`i`) AS SIGNED), CAST(bit_and(`x`) AS SIGNED), CAST(bit_or(`i2`) AS SIGNED), CAST(bit_or(`i4`) AS SIGNED), CAST(bit_or(`i8`) AS SIGNED), CAST(bit_or(`i`) AS SIGNED), CAST(bit_or(`x`) AS SIGNED) FROM `mysql_fdw_core`.`bitwise_test`
(4 rows)

--Testcase 87:
SELECT
  BIT_AND(i2) AS "1",
  BIT_AND(i4) AS "1",
  BIT_AND(i8) AS "1",
  BIT_AND(i)  AS "?",
  BIT_AND(x)  AS "0",
  BIT_OR(i2)  AS "7",
  BIT_OR(i4)  AS "7",
  BIT_OR(i8)  AS "7",
  BIT_OR(i)   AS "?",
  BIT_OR(x)   AS "7"
FROM bitwise_test;
 1 | 1 | 1 | ? | 0 | 7 | 7 | 7 | ? | 7 
---+---+---+---+---+---+---+---+---+---
 1 | 1 | 1 | 1 | 0 | 7 | 7 | 7 | 3 | 7
(1 row)

-- Cleanup
--Testcase 44:
DELETE FROM f_test_tbl1;
--Testcase 45:
DELETE FROM f_test_tbl2;
--Testcase 46:
DROP FOREIGN TABLE f_test_tbl1;
--Testcase 47:
DROP FOREIGN TABLE f_test_tbl2;
--Testcase 88:
DROP FOREIGN TABLE aggtest;
--Testcase 89:
DROP FOREIGN TABLE bitwise_test;
--Testcase 48:
DROP USER MAPPING FOR public SERVER mysql_svr;
--Testcase 49:
DROP SERVER mysql_svr;
--Testcase 50:
DROP EXTENSION mysql_fdw;
